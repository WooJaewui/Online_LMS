
 소프트웨어 구조 패턴과 행동 패턴.



 # 소프트웨어 구조 패턴.

Adapter 패턴.
인터페이스가 호환되지 않는 클래스들을 이용할 수 있도록 타 클래스의 인터페이스에 덧씌움.
두 클래스의 인터페이스를 모두 상속받아 정의.

Facade 패턴.
서브시스템에 있는 인터페이스 집합에 하나의 인터페이스를 제공.
구성요소를 보호하고, 서브시스템과 클라이언트 코드 간의 결합도를 낮춤.

Proxy 패턴.
접근이 힘든 객체에 대한 대역 제공.
실제 서비스와 같은 이름의 메소드를 구현. ( 인터페이스 사용 )

Composite 패턴.
클라이언트에서 객체 컬렉션과 개발 객체를 똑같이 다룰 수 있도록 함.
단일 객체와 복합 객체를 동일하게 다룰 수 있음.



 # 소프트웨어 행동 패턴.

Observer 패턴.
상태 변화를 알려주는 패턴.
1 대 n의 의존성을 가지고, 이벤트 핸들링 시스템 구현에 활용한다.

Iterator 패턴.
어떤 목록을 순차적으로 처리하기 위한 디자인 패턴.

Command 패턴.
서로 요청이 다른 사용자의 매개변수, 요청 저장, 로깅, 연산 취소를 지원.
하나의 추상 클래스에 메소드 하나를 만들고, 각 명령이 들어오면 그에 맞는 서브 클래스가 실행.

Mediator 패턴.
중재자를 통해 처리하는 구조 패턴.
객체 간의 상호작용을 캡슐화해서 하나의 객체 안에 정의.

