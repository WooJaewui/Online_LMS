
 소프트웨어 디자인 패턴과 생성 패턴.



 # 소프트웨어 디자인 패턴.

소프트웨어 디자인 패턴.
소프트웨어 디자인에서 계속 재현되는 문제를 해결하는 재사용 가능한 해결법.

디자인 패턴.
객체지향 프로그래밍에서 공통으로 디자인 문제를 찾아내고 해결하는 가이드라인.
특정 유형의 프로그래밍 문제를 해결하는 방식을 제공해주는 역할.
알고리즘과 같이 프로그램 코드로 바로 변환은 안되지만, 특정 상황에서 문제를 해결하는 방식.

디자인 패턴의 장점 및 필요성.
디자인 문제와 그 해결책을 찾을 때 디자인 패턴이 간결한 용어 모음을 제공.
업무 논의 및 디자인 문서를 작성할 때 등 상호 간 의사결정에 용어로 쓰임.
설계 변경 요청에 대한 유연한 대처가 가능하다.

디자인 패턴 단점.
객체지향 설계 위주 사용.
객체지향 구현 위주의 사용.
초기 투자 비용의 부담.

소프트웨어 생성 패턴 Creation Pattern.
객체의 생성 과정에서 관여하는 패턴.
Singleton 패턴 : 클래스의 인스턴스가 하나임을 보장.
Builder 패턴 : 복합 객체의 생성과정과 표현과정을 분리시켜 동일한 생성과정에서 다양한 표현 생성.
Factory Method 패턴 : 객체를 생성하는 인터페이스를 정의하지만, 인스턴스를 만드는 클래스는 서브클래스.
Abstract Factory 패턴 : 구체적인 클래스를 지정하지 않고 인터페이스를 제공.
Prototype 패턴 : 생성할 객체의 종류를 명시하는데 원형이 되는 예시물을 이용.

구조 패턴 Structural Pattern.
클래스나 객체의 합성에 관한 패턴.
Adapter or Wrapper 패턴 : 클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴.
Bridge 패턴 : 구현부에 추상층을 분리하여 각자 변형할 수 있는 패턴.
Composite 패턴 : 객체들의 관계를 트리 구조로 표현하는 패턴.
Decorator 패턴 : 주어진 상황 및 용도에 따라 어떤 객체에 덧붙이는 패턴.
Facade 패턴 : 서브 시스템에 있는 인터페이스 집합에 하나의 인터페이스를 제공.
Proxy 패턴 : 다른 객체로 접근하는 것을 통제하기 위해 그 객체의 매니저 혹은 자리 채움자를 제공.

행동 패턴.
클래스나 객체들이 상호작용하는 방법과 책임을 분산하는 방법.
Comman 패턴 : 요청을 객체로 캡슐화하여 서로 다른 사용자의 매개변수화, 로깅 연산 취소 등을 지원.
Interpreter 패턴 : 주어진 언어에 대해서 문법을 위한 표현수단을 정의.
Iterator 패턴 : 어떤 객체 집합의 원소들을 순차적으로 접근할 수 있는 방법 제공.
Mediator 패턴 : 한 집합에 속해있는 객체들의 상호작용을 캡슐화하는 객체를 정의.
Observer 패턴 : 어떤 객체의 상태가 변할 때, 의존관계에 있는 모든 객체가 자동으로 갱신.
State 패턴 : 객체의 내부 상태가 변경될 때 행동을 변경하도록 허락.
Strategy 패턴 : 각각 캡슈로화하며, 이들을 상호교환 가능하도록 함.
Template 패턴 : 알고리즘의 구조는 변경하지 않고, 알고리즘의 각 단계를 서브 클래스에서 재정의함.
Visitor 패턴 : 객체구조를 이루는 원소에 대해 수행할 연산을 표현.



 # 소프트웨어 생성 패턴.

Singleton 패턴.
어떤 클래스가 한 번만 메모리에 할당.
동일 인스턴스를 재사용 하기 위한 패턴.

팩토리 메소드.
new 키워드를 호출하는 부분을 서브 클래스에서 하게 됨.
객체를 만들어 내는 공장을 만드는 패턴. ( 클래스 간의 결합도를 낮춤 )

추상 팩토리 패턴.
인터페이스를 이용하여 서로 연관되거나 의존되는 객체를 구상 클래스로 지정하지 않고 생성.

빌더 패턴.
서로 다른 표현방식을 가지는 객체를 동일한 방식으로 생성하고 싶을 경우에 사용.
객체를 생성할 때 부분 생성 후 최종 결과를 얻어가는 방식으로 객체 생성과정을 볼 수 있음.



