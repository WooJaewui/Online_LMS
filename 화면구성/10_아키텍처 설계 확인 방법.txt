
 아키텍처 설계 확인 방법.



 # 아키텍처 분석.

아키텍처 분석의 배경.
위험 요소나 불확실한 상황에 대한 중요한 의사결정을 하기 어려움.
아키텍처가 목표로 하는 품질을 어느 정도 만족시켰는지 판단 필요.

아키텍처 목적.
소프트웨어 프로젝트의 실패 사전 방지.
더 나은 소프트웨어의 개발이 가능하고 더 좋은 아키텍처 설계가 가능.
잘못된 아키텍처를 설계한 프로젝트를 찾아내서 품질 불량 최소화.

아키텍처 분석 조직.
평가팀 : 전체적인 평가 리딩, 분석 수행.
스테이크 홀더 : 아키텍처 관련 이해관계자, 프로젝트 관리자, 개발팀, 고객, 스폰서 등.

아키텍처 분석 시점.
설계가 어느 정도 명확해지고 수행이 가능하며 본격적인 구현 단계에 착수 전 진행.
모든 단계에서 언제든 아키텍처 검증 수행 가능. ( 특별히 정해진 단계는 없다 )

아키텍처 정의 도중 평가.
목적 : 품질 및 기능 요구사항 만족.
산출물 : 좀 더 견고한 요구사항명세.

아키텍처 분석과정 산출물.
품질 속성 시나리오 목록.
아키텍처 분석서.
설계 검증 결과 보고서 등.



 # 아키텍처 결정.

아키텍처 평가 기법.
아키텍처 적합성 판단 및 평가하는 표준 기법.

평가 결과 분석.
설계하고 있는 시스템에 대한 아키텍처 적절성 판단.
모든 품질 목표를 만족시키는 아키텍처는 없음. 

ATAM Architecture Tradeoff Analysis Method.
명확한 분석, Legacy System 분석에 활용 가능.
비기능적 요구사항( 신뢰성, 사용성, 유지 보수성 등 ) 중심 분석.
아키텍처 스타일, 품질 속성은 SAAM 영향을 받음.

CBAM Cost Benefit Architecture Method.
ATTAM의 결과물을 기반으로 아키텍처의 경제성 분석.
ROI 측면의 의사결정을 위한 기준 제시.

SAAM Software Architecture Anlysis Method.
아키텍처의 Modifiability와 Functionality 집중 분석.
평가 경험이 없는 조직에서도 활용 가능.

ADR Active Design Review.
아키텍처의 구성요소 간의 응집도를 평가하는 기법.
검토자의 실습문제 풀이에 기초한 평가 기법.

ARID Architecture Reviews for Intermediate Design.
전체 아키텍처가 아닌 특정 부분에 대한 품질 요소에 집중하여 평가.




