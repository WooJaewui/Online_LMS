
 아키텍처 설계 프로세스.



 # 화면 구현 및 아키텍처의 이해.

화면구현.
우리가 일상에서 눈으로 보는 다양한 서비스를 만들어 내는 것.

용어.
소프트웨어 : 건축과 달리 무형으로 존재하는 다양한 동작들로 구성.
소프트웨어 아키텍처 : 무형으로 존재하는 다양한 동작들을 어떻게 구현할지 설계하고 그 뼈대를 만들어 냄.

소프트웨어서의 화면 구현.
소프트웨어는 다양한 사용자 입력과 그에 따른 출력을 화면에서 모두 구현. ( 입력 + 출력 )

아키텍처.
비즈니스 요구 사항을 만족시키기 위해 전체 시스템에 대한 구조를 정의.

아키텍처 개념.
컴포너트들 간의 관계 정의.
컴포넌트가 다루는 데이터 정의.
시스템을 구성하는 컴포넌트 정의.

아키텍처 설계 고려사항.
사용자 요구 사항에 맞춰 설계.
확장 가능한 형태로 설계.
시스템을 사용할 조직에 맞게 설계.

아키텍처 특징.
소프트웨어 요소 간의 관계 정보를 가짐.
하나 이상의 아키텍처 요소와 한 가지 이상의 연관 관계로 구성될 수 있음.
시스템의 공통성을 추상화 시킴. ( 다양한 행동과 개념, 패턴 결과 등을 나타냄 ) 
외부에 드러나는 시스템 요소의 행위는 다른 시스템 요소와의 상호 작용 방법을 제시.
시스템의 전체적인 구조를 표현.

아키텍처 구성요소.
참조모델 : 비즈니스 또는 시스템 문제를 해결하는 데 참여하는 일반적인 기능의 구분.
아키텍처 패턴 : 시스템 구조를 체계적으로 구성하기 위한 기본적인 스키마.
참조 아키텍처 : 참조 모델을 구성하는 요소들을 소프트웨어로 구현한 단위와 이들 간의 데이터 흐름.
소프트웨어 아키텍처 : 목표 시스템의 기능-비기능적 요구사항 등을 고려하여 참조 아키텍처를 수정, 보완.

아키텍처 기능.
간략화 : 이해하고 추론할 정도의 간결성 유지.
추상화 : 추상적인 표현을 사용하여 복잡도 관리.
가시성 : 시스템이 포함해야 할 것들을 시각적으로 표현.
관점 모형 : 이해당사자의 관심당사자에 따른 모형 제시.
의사소통 수단 : 이해당사자 간 원활한 의사소통의 수단으로 이용.



 # 아키텍처 모델, 역할, 뷰.

IEEE1471-2000란?
소프트웨어 구조에 대한 기술을 규정한 IEEE 표준.

IEEE1471-2000 용어.
이해관계자 : 시스템 아키텍처의 이해관계자를 의미.
관심 : 기능 요구 사항과 비기능 요구 사항. 정적인 구조와 동적인 동작.
뷰 포인트 : 뷰를 기술 및 분석하기 위한 모델.
뷰 : 여러 이해관계자의 관심사에 본 시스템의 전체를 표현.
모델 : UML 다이어그램 등.

아키텍처 역할.
고객 대응 : 시스템의 품질 속성을 도출하고 Trade-off 분석을 통해 구현 가능한 아키텍처를 제시.
프로젝트 관리 파트 대응 : 개발 프로세스의 일정을 계획할 때 아키텍처 관점에서 의견 제공.
개발 파트 대응 : 개발팀과 도출된 아키텍처를 구현하는 데 고려해야 하는 설계 이슈 가이드 제공.
솔루션 담당 : 아키텍처 구현을 위해 사용되는 솔루션 적용에 필요한 이슈에 대해 소통.

아키텍처 뷰.
시스템의 여러 가지 측면을 고려하기 위해 다양한 관점을 바탕으로 정의.



 # 아키텍처 설계의 중요성 및 원칙.

아키텍처 설계의 중요성.
시스템을 효과적으로 관리할 수 있는 수준에서 고려사항을 표현하고 조율하는 공용어.
요구 사항이 유사한 시스템에 적용할 수 있으며 이를 통해 재사용, 소프트웨어 제품 라인을 구성.

아키텍처 설계 순서.
시스템 환경의 이해 -> 요구사항 분석 -> 아키텍처 분석 -> 아키텍처 설계 -> 검증 및 승인.

아키텍처에 영향을 미치는 요소.
기술적 환경, 배경과 경험, 개발 조직, 이해관계자, 품질 요구 사항 등.

검증 및 승인.
아키텍처 평가 : 요구 사항 만족 접합성 평가, 품질 속성 간 Tradeoff 관계 평가.
아키텍처 상세화 : 반복적으로 진행하며, 설계 메커니즘 도출 및 디자인 패턴 고려.
아키텍처 승인 : 고객 및 이해당사자 최종 승인.



