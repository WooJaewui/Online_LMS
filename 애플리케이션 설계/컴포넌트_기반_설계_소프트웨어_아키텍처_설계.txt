
 컴포넌트 기반 설계 / 소프트웨어 아키텍처 설계.



 # 컴포넌트 기반 개발의 개요.

소프트웨어 컴포넌트 Software Component.
특정한 기능을 수행하기 위해 독립적으로 개발되고, 정의된 인터페이스를 가지며
다른 부품과 조립되어 애플리케이션을 구축하기 위해 사용되는 소프트웨어 부품.

소프트웨어 컴포넌트 특징.
독립적인 소프트웨어 모듈.
구현, 명세화, 패키지화 및 배포 가능.
하나의 컴포넌트는 하나 이상의 클래스들로 구성.
컴포넌트는 반드시 인터페이스를 통해서만 접근 가능.
실행코드 기반 재사용.

소프트웨어 컴포넌트 유형.
분산 객체 컴포넌트, 비즈니스 컴포넌트, 확장 비즈니스 컴포넌트, 시스템 컴포넌트.

분산 객체 컴포넌트.
EJB, CORBA 등 분산 객체 환경 지원 컴포넌트.

비즈니스 컴포넌트.
물리적으로 배포할 수 있는 독립된 하나의 비즈니스 개념을 구현한 컴포넌트.

확장 비즈니스 컴포넌트.
확장을 고려하여 설계된 비즈니스 컴포넌트.
그룹 형태로 재사용이 가능한 항목의 집합체.

시스템 컴포넌트.
비즈니스 가치를 제공하기 위해 같은 일을 하는 시스템 수준의 컴포넌트들의 집합.
예) 트랜잭션 관리, DB Connection 등.

컴포넌트 기반 개발.
컴포넌트를 소프트웨어 부품처럼 미리 만들어서 조립하듯이 애플리케이션을 만드는 개발 방법론.

CD Component Development.
컴포넌트 Repository에 컴포넌트를 등록한다.

CBD Component Based Development.
컴포넌트 Repository에 저장된 컴포넌트를 활용하여 애플리케이션을 조립한다.

컴포넌트 기반 개발 특징.
생산성 향상 : 애플리케이션 개발 시간 단축, 품질이 검증된 컴포넌트 사용.
코품질의 애플리케이션 구축 가능 : 지속적인 품질 관리로 검증된 컴포넌트 사용.
재사용 : 동일 기능의 중복 개발 없이 기존에 개발된 컴포넌트 이용.
대체성 : 모델과 프레임웍 기반의 재사용이 가능. ( 다른 컴포넌트로 대체 가능 )
변경 용이성 : 요구사항의 변화와 수용에 안정적이고 신속한 변경 가능.
기술 집약성 : 기술 숙련에 대한 집중이 가능.
관리 용이성 : 독립적인 컴포넌트 단위의 관리로 복잡성 최소.
사용자 중심 : 사용자 관점 요구사항 분석으로 컴포넌트 식별 가능.



 # 컴포넌트 기반 설계.

컴포넌트 식별.
유스케이스와 클래스 상관분석을 통하여 컴포넌트 식별.

응용 컴포넌트.
참조 유스케이스는 응용 컴포넌트 추출 대상.
예 ) 로그인, 계좌 정보 조회, 조회 전용 유스케이스

업무 컴포넌트.
참조 및 공통 유스케이스 이외의 모든 컴포넌트.

공통 컴포넌트.
공통 유스케이스는 공통 컴포넌트 추출 대상.

컴포넌트 추출 절차.
유스케이스 데이터처리 테이블 작성 -> 참조 유스케이스 추출 -> 공통 유스케이스와 공통 클래스 추출
-> 클래스별 유스케이스 가중치 테이블 작성 -> 유스케이스 클래스 클러스터링( 그룹핑 ) 
-> 공통 컴포넌트 추출 -> 응용 컴포넌트 추출.

컴포넌트 명세 - 구조 명세.
컴포넌트를 구성하는  클래스들의 구조와 이들 간의 관계를 UML의 컴포넌트 다이어그램으로 설계하는 것.

컴포넌트 명세 - 기능 명세.
구조 명세된 컴포넌트들의 기능을 자세히 기술하는 것.



 # 소프트웨어 아키텍처 설계.

소프트웨어 아키텍처.
소프트웨어를 구성하는 컴포넌트와 이들 간의 상호작용 및 관계.
이들이 구성하는 소프트웨어의 설계 및 진화를 위한 원칙들의 집합.

IEEE 1471.
소프트웨어 아키텍처 국제 표준이다.

디자인 패턴과 이디엄.
디자인 패턴 : 소프트웨어 시스템의 서브시스템이나 컴포넌트들 혹은 그것들 간의 관계를 해법으로 사용하는 경우.
이디엄 : 컴포넌트들 혹은 컴포넌트들 간 관계의 특정 측면을 구현하는 방법.

소프트웨어 아키텍처 패턴.
문제를 해결하는 해법으로 소프트웨어 시스템의 기본구조와 관련된 것을 다룰 경우 아키텍처 패턴이라고 함.

Layer 패턴.
가장 일반적으로 사용하는 아키텍처 패턴.
모듈의 재사용성을 높여 유지보수성이나 이식성에 좋음.

Blackboard 패턴.
DB와 같은 데이터 중심 패턴 중 하나이다.
명확히 정의된 문제 해법이 없을 때 문제를 풀어가는 하나의 방식을 정의.

Broker 패턴.
외부에 분산된 컴포넌트를 호출하려고 할 때 컴포넌트 사이에 Broker가 존재하는 방식.
안정성이 뛰어남.

MVC패턴.
모듈, 뷰, 컨트롤 3개의 컴포넌트로 애플리케이션을 구분한 패턴.

Publisher-Subscriber 패턴.
하나의 Publisher가 다수의 Subscriber에게 상태가 변경되었음을 단방향 전파로 통지하는 패턴.
Observer 패턴, Dependents 패턴, Event 패턴으로 사용됨.

Pipes and Filters 패턴.
데이터 스크림을 생성하고 처리하는 패턴.









