
 디자인 패턴



 # 디자인 패턴의 개요.

디자인 패턴의 개념.
소프트웨어 설계에 있어 공통된 문제들에 대한 표준적인 해법.
반복적으로 나타나는 문제들을 해결해 온 전문가들의 경험을 모아서 정리한 일관된 솔루션.

디자인 패턴의 4요소.
패턴 이름, 문제, 해법, 결과.

디자인 패턴 이름.
한 두 단어로 설계 문제와 해법 서술.

문제.
언제 패턴을 사용하는가를 서술.
해결할 문제와 그 배경을 설명.

해법.
설계를 구성하는 요소들과 그 요소들 간의 관계, 책임, 협력관계 서술.
구체적이지 않은 추상적인 설명.

결과.
디자인 패턴을 적용해서 얻는 결과와 장단점 서술.
시스템의 유연성, 확장성, 이식성에 영향을 줌.

디자인 패턴의 원칙.
캡슐화 : 바뀌는 부분은 캡슐화.
위임 : 상속보다는 위임을 활용.
인터페이스 : 구현이 아닌 인터페이스에 맞춰서 프로그래밍.
Loosely Coupling : 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인 사용.
개방 & 폐쇄 : 클래스 확장에 대해서는 Open, 변경에 대해서는 Close.
의존관계 : 추상화된 클래스에 의존하고 구현 클래스 의존은 배제.

생성패턴.
객체 생성 방식 결정.
클래스의 정의, 객체생성방식의 구조화, 캡슐화.
클래스 생성 방식, 객체 생성 방식이 있다.

구조패턴.
객체를 조직화 하는 일반적인 방법 제시.
객체 구성에 유동성, 확장성 추가 가능.
클래스 구조 방식, 객체 구조 방식이 있다.

행위패턴.
객체의 행위를 조직화 관리,연합한다.
런타임 시 복잡한 제어 흐름을 결정짓는 데 사용.
클래스 행위 방식, 객체 행위 방식이 있다.

디자인패턴, 아키텍처, 프레임워크 비교.
디자인패턴 : 실제 구현 과정에서 해결방안으로 제시. 
아키텍처 : 전체 시스템의 구조나 설계 모형 재사용. 모든 종류의 시스템에 적용 가능. ( 디자인패턴보다 큰 개념 )
프레임워크 : 시스템 구현효율성 향상과 개발편의성 제공. 하나의 시스템을 구축하기 위한 틀. ( 가장 큰 개념 )

효과 비교.
디자인패턴 : 유지 보수의 용이성. 애플리케이션의 확장성 향상. 문제에 대한 해결안을 찾는 시간 단축.
아키텍처 : 구체적인 코드가 다름. 구현 경험 이해로 바람직한 아키텍처 설계 가능.
프레임워크 : 실제 코드가 일부 작성, 프레임워크 클래스를 서브 클래싱해서 유저 코드 작성.



 # 생성 패턴.

Abstract Factory 패턴.
구체적인 클래스를 지정하지 않고 관련성을 갖는 개체, 서로 독립적인 객체를 생성할 수 있는 인터페이스 제공.

Abstract Factory 객체.
Abstract Product : 추상 객체.
Concrete Product : Abstract Product를 구현한 객체.

Abstract Factory 사용.
여러 제품군에 속한 객체 생성 디자인.
인터페이스만 드러난 객체 구현.

Builder 패턴.
제품을 여러 단계로 나눠서 만들 수 있도록 제품 생산 단계를 캡슐화 한 것.

Builder 객체.
Abstract Builder : 추상 객체.
Concrete Builder : Builder 클래스의 인터페이스를 구현.
Director : Builder API를 사용해 원하는 부품을 조립 후 인스턴스를 생산.
Product : Builder에 의해 최종적으로 생상된 제품으로 Director가 사용.

Builder 사용.
복합 객체의 생성 알고리즘과 이를 합성하는 요소 객체들 간의 조립 방법이 서로 독립적일 때 사용.

Singleton 패턴.
지정한 클래스의 인스턴스가 반드시 1개만 존재하도록 하는 패턴.

Singleton 사용.
클래스의 인스턴스가 오직 하나이어야 함을 보장할 때 사용한다.



 # 구조 패턴.

Adaptor 패턴.
재사용성을 높이기 위해 변환 적용하여 클래스 간 호환성을 확보하는 패턴.
Wrapper 패턴이라고도 함.

Pacade 패턴.
복잡한 내부 구조를 보이지 않으면서 외부와의 일관된 인터페이스를 제공하는 패턴.
복잡한 구조를 통일하는 역할을 한다.



 # 행위 패턴.

Chain of Responsibility 패턴.
요청을 처리할 수 있는 기회를 하나 이상을 부여해서 객체 사이의 결합도를 없애는 패턴.

Chain of Responsibility 사용.
핸들러가 누가 선행자인지 모를때 사용한다.

Command 패턴.
동작이나 트랜잭션에 대한 요청을 객체를 통해 캡슐화 함으로써 해당 요청을 저장, 로그에 기록함.
( 이해 X )





