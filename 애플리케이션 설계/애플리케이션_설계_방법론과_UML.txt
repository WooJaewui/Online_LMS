
 애플리케이션 설계 방법론과 UML - 애플리케이션 설계.



 # 애플리케이션 설계 방법론의 개요.

애플리케이션 설계 방법론의 개념.
애플리케이션 개발에 대한 여러 작업들의 수행방법.
개발 경험을 바탕으로 각 작업 단계를 체계적으로 정리한 작업수행의 표준 규범.

애플리케이션 설계 방법론의 구성요소.
작업절차( Process ) : 프로젝트 수행 시 이루어지는 작업단계의 체계.
작업방법( Method ) : 각 단계별 수행해야 하는 일에 대한 구체적인 설명.
산출물( Outputs ) : 각 단계별로 만들어야 하는 산출물의 목록 및 양식.
기법( Technique ) : 각 단계별로 작업수행 시 소요되는 기술 및 기법 설명.
도구( Tool ) : 기법에서 제시된 각 기법별 지원도구에 대한 구체적인 사용표준 및 방법.

애플리케이션 설계 방법론의 역사.
구조적 설계 방법론( 1960 ~ 1980 ) -> 정보공학 설계 방법론( 1980 ~ 2000 ) 
-> 객체지향 설계 방법론( 2000 ~ ) -> 다양한 방법론 등장.



 # 애플리케이션 설계 방법론의 유형.

구조적 설계 방법론.
전체 시스템을 기능에 따라 분할 개발하고, 이를 통합하는 분할과 정복 접근 방식의 방법론.
데이터 플로우 다이어그램, 엔티티 관계도, 상태전이도 등의 분석 도구 활용.
프로세스 중심의 하향식 방법론.
애플리케이션 구조가 계층적으로 설계됨.

정보공학 설계 방법론.
주요 부문을 대상으로 정보시스템을 정형화된 기법을 상호 연관성 있게 적용하는 데이터 중심 방법론.
기업 중심으로 정보전략 계획( ISP ) 포함.
데이터 중심의 분석과 설계 진행.
도형 중심의 산출물.

객체지향 설계 방법론.
애플리케이션 구조를 객체 기반으로 설계하는 방법.
소프트웨어 생명주기에 객체지향 개념을 접목시켜 일관된 모델을 가지고 개발하는 방법론.
Java, C++같은 객체지향언어가 2000년대 국내에 도입되기 시작하면서 사용됨.
정보와 프로세스를 객체에 통합하여 설계.

객체지향 설계 단계적 작업 항목.
객체 모델링 - 객체 다이어그램 : 시스템 정적구조 포착.
동적 모델링 - 상태 다이어그램 : 시간 흐름에 따라 객체 사이의 변화 조사.
기능 모델링 - 자료흐름도 : 입력에 대한 처리 결과 확인.

컴포넌트 기반 설계 방법론( CBD )
컴포넌트 단위의 개발, 조립, 유지보수.
CD( Component Development ) : 컴포넌트를 설계, 구현한 후 이를 컴포넌트 저장소에 저장.
CBD( Compoenet Based Development ) : 컴포넌트 저장소에서 필요한 컴포넌트를 추출 후 조립하여 개발.

모델 기반 설계 방법론( MDD )
애플리케이션을 모델 기반으로 설계, 구축하는 방법론.



 # UML의 개요.

UML의 개념.
객체 기술에 대한 표준화 기구( OMG )에서 인정한 객체지향 분석 모델링 언어.

OMG
Object Management Group으로 객체 기술에 대한 표준화 기구이다.

UML 특징.
가시화 언어 : 그래픽 언어, 의사소통 용이.
명세화 언어 : 분석, 설계 내용 표현.
구축 언어 : 다양한 언어와 연결.
문서화 언어 : 의사소통 문서.

UML의 구성요소.
사물( Things ) : 구조사물, 행위사물, 그룹사물, 주해 사물 등이 있다.
관계( Relationship ) : 연관관계, 포함관계, 일반화관계, 의존관계, 실체화관계가 있다.
다이어그램( Diagram ) : 기능모델, 정적모델, 동적모델.



 # UML Diagram의 유형.

Use Case Diagram.
시스템이 제공하는 서비스와 외부 환경과의 관계를 표현하는 Diagram.
시간과 순서 개념없이 정적인 관점에서 모델링.
시스템과 사용자 간의 상호 교류에 바탕을 둠.

User Case Diagram 구성요소.
액터 : 교류하는 사람이나 시스템.
유스케이스 : 시스템이 제공하는 서비스 혹은 기능.
관계 : 액터와 유스케이스 사이의 상호작용하는 관계.

Class Diagram 관계.
Aggregation : 생명주기가 다름.
Composition : 하나의 객체가 사라지면 관련 있느 다른 객체도 사라진다.

Sequence Diagram.
외부의 특정한 처리 요청을 해결하기 위해 필요한 객체들과 참여한 시간적, 순서적 처리 흐름을 표현.

Component Diagram.
여러 개의 Class들을 묶고, 인터페이스를 통해 하나의 단위 업무처리를 할 수 있도록 만든 Diagram.






















