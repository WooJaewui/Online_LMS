
 결함 조치 관리.



 # 결함 조치 관리.

결함 조치 관리.
결함 조치 관리 : 결함 발견에서부터 조치 완료될 때까지의 일련의 관리 활동.
결함 발견 활동 : 애플리케이션 테스터들의 주요 활동.

결함 조치 관리 프로세스.
결함 등록 -> 결함 조치자 지정 -> 결함 조치분석 및 조치 우선순위 결정 
-> 결함 조치 -> 해결확인 -> Re-Test -> 결함현황보고.

cross 결함.
서로 다른 팀의 기능이 복합적으로 이상이 발생하여 생기는 결함.
회의를 통해 결함 조치팀을 결정한다.



 # 결함 유형 분류.

코드결함.
개발자가 소스 코드 개발을 잘못하여 오류를 유발한 경우. ( 기능 결함 )
조치자 - 애플리케이션 개발자.

데이터 결함.
데이터베이스에 저장된 데이터의 불일치. ( 정합성 결함 ) 
조치자 - DBA, DA ( Data Architect ) 

환경 결함.
서버, 네트워크, 시스템 소프트웨어 등의 설정이 잘못되어 오류가 나오는 결함.
특이한 결함이라서 결함 발견이 어렵다.
조치자 - SA ( Software Architect ), TA( Technical Architect ) 

패키지 결함.
소프트웨어 패키지의 오류로 인해 발생하는 결함.
조치자 - 3rd Party Vendor

클라이언트 환경.
테스터의 PC 환경 설정이 잘못되어 발생하는 결함.
조치자 - SA( Software Architect )

결함 아님.
테스터 입장에서는 결함이라고 등록 하였으나 결함이 아닌 경우.

결함 심각도.
1등급 Critical : 조치되지 않으면 더 이상 진행이 불가한 경우. ( 즉시 조치 )
2등급 High : 진행은 가능하지만, 핵심 기능에 오류가 발생 되는 경우. ( 1일 이내 조치 )
3등급 Medium : 핵심 기능은 정상이나 부가 기능이 결함인 경우. 
4등급 Low : 결함은 아니지만 개선할 경우 사용자에게 편리한 경우. 



 # 결함 조치 우선순위 결정.

업무별 가중치 부여.
결함의 조치 우선순위를 정하기 위해서 시스템별 등급을 부여한 것.

결함 조치 우선순위.
최우선 조치 : 결함 심각도가 높고, 업무별 가중치도 높은 경우.
신속 조치 : 결함 심각도가 높고, 업무별 가중치가 낮은 경우.
되도록 신속 조치 : 결함 심각도가 낮고, 업무별 가중치가 높은 경우.
여력이 되면 조치 : 결함 심각도, 업무별 가중치 둘다 낮은 경우.







