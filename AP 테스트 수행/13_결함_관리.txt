
 결함 관리.



 # 애플리케이션 결함 관리 개요.

용어 설명.
결함( Defects ) : 필요한 기능을 수행하지 못하도록 하는 애플리케이션 상의 결점.
실패( Failure ) : 요구사항을 만족하지 못하는 상태. ( 결과의 차이 ) 
개선 : 결함은 아니지만, 사용자가 편의성 향상을 위해 수정을 요청하는 것.

애플리케이션 결함 관리 프로세스.
결함 등록 -> 수정 및 빌드 또는 배포 -> 보고.

결함의 상태.
Open : 처음 결함이 발생.
Assigned : 결함을 할당.
Resolved : 결함을 수정한 후의 상태. ( 테스트 실패하면 다시 Assigned )
Close : 수정 확인 후 상태. ( 다시 테스트 후 ) 
Review : 검토 회의.
Deferred : 해결 불가 또는 연기.

결합 관리 주의사항.
결함은 등록에서부터 최종 종료될 때까지 추적할 수 있어야 함.
누락된 결함이 발생하지 않고 결함을 신속하게 처리하기 위해 결함을 추적한다.



 # 애플리케이션 결함 관리 도구.

결함의 유형.
코드 : 애플리케이션 코드에선 나온 결함. 개발자의 실수에서 발생.
데이터 : 데이터에서 발생하는 결함. 
환경 : 하드웨어, 미들웨어, 네트워크, 시스템 소프트웨어 등 환경 결함.
패키지 : 패키지 소프트웨어 자체적으로 가지고 있는 결함.
클라이언트 환경 : 특정 클라이언트 PC에서만 발생하는 환경 결함.
결함 아님 : 테스터는 결함이라고 등록하였지만 사실 결함이 아닌 것들이 있음. ( 테스터 실수 )

결함 심각도.
Critical : 조치되지 않으면 테스트가 더이상 진행할 수 없는 결함.
High : 핵심 기능 결함.
Medium : 부가 기능이 결함.
Low : 기능 개선이 필요한 경우.

결함 등록시 주의사항.
결함은 보통 테스트 진행할때 많이 발견되는데, 테스트 실행시 발견된 결함은 테스트이름과 같이 기록한다.

1대 10대 100의 법칙.
요구사항 분석 단계에서 결함의 수정 비용이 1,
설계 및 구현 단게에서 결함의 수정 비용은 10,
테스트 및 운영 단계에서 결함의 수정 비용은 100.

팔레토 다이어그램.
결함이 발생한 부분을 집중적으로 검토하면 또 다른 결함이 발견할 가능성이 높다.

피시본 다이어그램.
물고기 뼈와 같이 생겨서 붙여진 이름.
결함의 잠재 원인을 알아보기 쉽게 그려줘서 팀원들과 토론하기 편리함.

결함 관리 도구.
JIRA, Bugzilla, Trac, Mantis( OSS ) 







